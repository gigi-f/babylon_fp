{
  "version": 3,
  "sources": ["../../../dev/core/src/Physics/v1/physicsJoint.ts", "../../../dev/core/src/Physics/v1/physicsImpostor.ts", "../../../dev/core/src/Physics/castingResult.ts", "../../../dev/core/src/Physics/physicsRaycastResult.ts", "../../../dev/core/src/Physics/v1/physicsEngine.ts", "../../../dev/core/src/Physics/v1/Plugins/cannonJSPlugin.ts"],
  "sourcesContent": ["import type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { IPhysicsEnginePlugin } from \"./IPhysicsEnginePlugin\";\r\n/**\r\n * Interface for Physics-Joint data\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface PhysicsJointData {\r\n    //Important for some engines, optional!\r\n    /**\r\n     * The main pivot of the joint\r\n     */\r\n    mainPivot?: Vector3;\r\n    /**\r\n     * The connected pivot of the joint\r\n     */\r\n    connectedPivot?: Vector3;\r\n    /**\r\n     * The main axis of the joint\r\n     */\r\n    mainAxis?: Vector3;\r\n    /**\r\n     * The connected axis of the joint\r\n     */\r\n    connectedAxis?: Vector3;\r\n    /**\r\n     * The collision of the joint\r\n     */\r\n    collision?: boolean;\r\n    /**\r\n     * Native Oimo/Cannon/Energy data\r\n     */\r\n    nativeParams?: any;\r\n}\r\n\r\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsJoint {\r\n    private _physicsJoint: any;\r\n    protected _physicsPlugin: IPhysicsEnginePlugin;\r\n\r\n    /**\r\n     * Initializes the physics joint\r\n     * @param type The type of the physics joint\r\n     * @param jointData The data for the physics joint\r\n     */\r\n    constructor(\r\n        /**\r\n         * The type of the physics joint\r\n         */\r\n        public type: number,\r\n        /**\r\n         * The data for the physics joint\r\n         */\r\n        public jointData: PhysicsJointData\r\n    ) {\r\n        jointData.nativeParams = jointData.nativeParams || {};\r\n    }\r\n\r\n    /**\r\n     * Gets the physics joint\r\n     */\r\n    public get physicsJoint(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this._physicsJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics joint\r\n     */\r\n    public set physicsJoint(newJoint: any) {\r\n        this._physicsJoint = newJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics plugin\r\n     */\r\n    public set physicsPlugin(physicsPlugin: IPhysicsEnginePlugin) {\r\n        this._physicsPlugin = physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Execute a function that is physics-plugin specific.\r\n     * @param {Function} func the function that will be executed.\r\n     *                        It accepts two parameters: the physics world and the physics joint\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsJoint: any) => void) {\r\n        func(this._physicsPlugin.world, this._physicsJoint);\r\n    }\r\n\r\n    //TODO check if the native joints are the same\r\n\r\n    //Joint Types\r\n    /**\r\n     * Distance-Joint type\r\n     */\r\n    public static DistanceJoint = 0;\r\n    /**\r\n     * Hinge-Joint type\r\n     */\r\n    public static HingeJoint = 1;\r\n    /**\r\n     * Ball-and-Socket joint type\r\n     */\r\n    public static BallAndSocketJoint = 2;\r\n    /**\r\n     * Wheel-Joint type\r\n     */\r\n    public static WheelJoint = 3;\r\n    /**\r\n     * Slider-Joint type\r\n     */\r\n    public static SliderJoint = 4;\r\n    //OIMO\r\n    /**\r\n     * Prismatic-Joint type\r\n     */\r\n    public static PrismaticJoint = 5;\r\n    //\r\n    /**\r\n     * Universal-Joint type\r\n     * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n     */\r\n    public static UniversalJoint = 6;\r\n    /**\r\n     * Hinge-Joint 2 type\r\n     */\r\n    public static Hinge2Joint = PhysicsJoint.WheelJoint;\r\n    //Cannon\r\n    /**\r\n     * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n     */\r\n    public static PointToPointJoint = 8;\r\n    //Cannon only at the moment\r\n    /**\r\n     * Spring-Joint type\r\n     */\r\n    public static SpringJoint = 9;\r\n    /**\r\n     * Lock-Joint type\r\n     */\r\n    public static LockJoint = 10;\r\n}\r\n\r\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class DistanceJoint extends PhysicsJoint {\r\n    /**\r\n     *\r\n     * @param jointData The data for the Distance-Joint\r\n     */\r\n    constructor(jointData: DistanceJointData) {\r\n        super(PhysicsJoint.DistanceJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Update the predefined distance.\r\n     * @param maxDistance The maximum preferred distance\r\n     * @param minDistance The minimum preferred distance\r\n     */\r\n    public updateDistance(maxDistance: number, minDistance?: number) {\r\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class MotorEnabledJoint extends PhysicsJoint implements IMotorEnabledJoint {\r\n    /**\r\n     * Initializes the Motor-Enabled Joint\r\n     * @param type The type of the joint\r\n     * @param jointData The physical joint data for the joint\r\n     */\r\n    constructor(type: number, jointData: PhysicsJointData) {\r\n        super(type, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param force the force to apply\r\n     * @param maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class HingeJoint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge-Joint\r\n     * @param jointData The joint data for the Hinge-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.HingeJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param {number} force the force to apply\r\n     * @param {number} maxForce max force for this motor.\r\n     */\r\n    public override setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public override setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class Hinge2Joint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge2-Joint\r\n     * @param jointData The joint data for the Hinge2-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.Hinge2Joint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param targetSpeed the speed the motor is to reach\r\n     * @param maxForce max force for this motor.\r\n     * @param motorIndex motor's index, 0 or 1.\r\n     */\r\n    public override setMotor(targetSpeed?: number, maxForce?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\r\n    }\r\n\r\n    /**\r\n     * Set the motor limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit the upper limit\r\n     * @param lowerLimit lower limit\r\n     * @param motorIndex the motor's index, 0 or 1.\r\n     */\r\n    public override setLimit(upperLimit: number, lowerLimit?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for a motor enabled joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface IMotorEnabledJoint {\r\n    /**\r\n     * Physics joint\r\n     */\r\n    physicsJoint: any;\r\n    /**\r\n     * Sets the motor of the motor-enabled joint\r\n     * @param force The force of the motor\r\n     * @param maxForce The maximum force of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setMotor(force?: number, maxForce?: number, motorIndex?: number): void;\r\n    /**\r\n     * Sets the limit of the motor\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setLimit(upperLimit: number, lowerLimit?: number, motorIndex?: number): void;\r\n}\r\n\r\n/**\r\n * Joint data for a Distance-Joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface DistanceJointData extends PhysicsJointData {\r\n    /**\r\n     * Max distance the 2 joint objects can be apart\r\n     */\r\n    maxDistance: number;\r\n    //Oimo - minDistance\r\n    //Cannon - maxForce\r\n}\r\n\r\n/**\r\n * Joint data from a spring joint\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface SpringJointData extends PhysicsJointData {\r\n    /**\r\n     * Length of the spring\r\n     */\r\n    length: number;\r\n    /**\r\n     * Stiffness of the spring\r\n     */\r\n    stiffness: number;\r\n    /**\r\n     * Damping of the spring\r\n     */\r\n    damping: number;\r\n    /** this callback will be called when applying the force to the impostors. */\r\n    forceApplicationCallback: () => void;\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport type { Nullable, IndicesArray } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { BuildArray } from \"../../Misc/arrayTools\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector3, Quaternion } from \"../../Maths/math.vector\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Bone } from \"../../Bones/bone\";\r\nimport type { BoundingInfo } from \"../../Culling/boundingInfo\";\r\nimport type { PhysicsEngine as PhysicsEngineV1 } from \"./physicsEngine\";\r\n\r\nimport type { PhysicsJointData } from \"./physicsJoint\";\r\nimport { PhysicsJoint } from \"./physicsJoint\";\r\nimport { Space } from \"../../Maths/math.axis\";\r\n\r\n/**\r\n * The interface for the physics imposter parameters\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface PhysicsImpostorParameters {\r\n    /**\r\n     * The mass of the physics imposter\r\n     */\r\n    mass: number;\r\n    /**\r\n     * The friction of the physics imposter\r\n     */\r\n    friction?: number;\r\n    /**\r\n     * The coefficient of restitution of the physics imposter\r\n     */\r\n    restitution?: number;\r\n    /**\r\n     * The native options of the physics imposter\r\n     */\r\n    nativeOptions?: any;\r\n    /**\r\n     * Specifies if the parent should be ignored\r\n     */\r\n    ignoreParent?: boolean;\r\n    /**\r\n     * Specifies if bi-directional transformations should be disabled\r\n     */\r\n    disableBidirectionalTransformation?: boolean;\r\n    /**\r\n     * The pressure inside the physics imposter, soft object only\r\n     */\r\n    pressure?: number;\r\n    /**\r\n     * The stiffness the physics imposter, soft object only\r\n     */\r\n    stiffness?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex velocities, soft object only\r\n     */\r\n    velocityIterations?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex positions, soft object only\r\n     */\r\n    positionIterations?: number;\r\n    /**\r\n     * The number used to fix points on a cloth (0, 1, 2, 4, 8) or rope (0, 1, 2) only\r\n     * 0 None, 1, back left or top, 2, back right or bottom, 4, front left, 8, front right\r\n     * Add to fix multiple points\r\n     */\r\n    fixedPoints?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    margin?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    damping?: number;\r\n    /**\r\n     * The path for a rope based on an extrusion\r\n     */\r\n    path?: any;\r\n    /**\r\n     * The shape of an extrusion used for a rope based on an extrusion\r\n     */\r\n    shape?: any;\r\n}\r\n\r\n/**\r\n * Interface for a physics-enabled object\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport interface IPhysicsEnabledObject {\r\n    /**\r\n     * The position of the physics-enabled object\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * The scale of the physics-enabled object\r\n     */\r\n    scaling: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotation?: Vector3;\r\n    /**\r\n     * The parent of the physics-enabled object\r\n     */\r\n    parent?: any;\r\n    /**\r\n     * The bounding info of the physics-enabled object\r\n     * @returns The bounding info of the physics-enabled object\r\n     */\r\n    getBoundingInfo(): BoundingInfo;\r\n    /**\r\n     * Computes the world matrix\r\n     * @param force Specifies if the world matrix should be computed by force\r\n     * @returns A world matrix\r\n     */\r\n    computeWorldMatrix(force: boolean): Matrix;\r\n    /**\r\n     * Gets the world matrix\r\n     * @returns A world matrix\r\n     */\r\n    getWorldMatrix?(): Matrix;\r\n    /**\r\n     * Gets the child meshes\r\n     * @param directDescendantsOnly Specifies if only direct-descendants should be obtained\r\n     * @returns An array of abstract meshes\r\n     */\r\n    getChildMeshes?(directDescendantsOnly?: boolean): Array<AbstractMesh>;\r\n    /**\r\n     * Gets the vertex data\r\n     * @param kind The type of vertex data\r\n     * @returns A nullable array of numbers, or a float32 array\r\n     */\r\n    getVerticesData(kind: string): Nullable<Array<number> | Float32Array>;\r\n    /**\r\n     * Gets the indices from the mesh\r\n     * @returns A nullable array of index arrays\r\n     */\r\n    getIndices?(): Nullable<IndicesArray>;\r\n    /**\r\n     * Gets the scene from the mesh\r\n     * @returns the indices array or null\r\n     */\r\n    getScene?(): Scene;\r\n    /**\r\n     * Gets the absolute position from the mesh\r\n     * @returns the absolute position\r\n     */\r\n    getAbsolutePosition(): Vector3;\r\n    /**\r\n     * Gets the absolute pivot point from the mesh\r\n     * @returns the absolute pivot point\r\n     */\r\n    getAbsolutePivotPoint(): Vector3;\r\n    /**\r\n     * Rotates the mesh\r\n     * @param axis The axis of rotation\r\n     * @param amount The amount of rotation\r\n     * @param space The space of the rotation\r\n     * @returns The rotation transform node\r\n     */\r\n    rotate(axis: Vector3, amount: number, space?: Space): TransformNode;\r\n    /**\r\n     * Translates the mesh\r\n     * @param axis The axis of translation\r\n     * @param distance The distance of translation\r\n     * @param space The space of the translation\r\n     * @returns The transform node\r\n     */\r\n    translate(axis: Vector3, distance: number, space?: Space): TransformNode;\r\n    /**\r\n     * Sets the absolute position of the mesh\r\n     * @param absolutePosition The absolute position of the mesh\r\n     * @returns The transform node\r\n     */\r\n    setAbsolutePosition(absolutePosition: Vector3): TransformNode;\r\n    /**\r\n     * Gets the class name of the mesh\r\n     * @returns The class name\r\n     */\r\n    getClassName(): string;\r\n}\r\n\r\nMesh._PhysicsImpostorParser = function (scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n    return new PhysicsImpostor(\r\n        physicObject,\r\n        jsonObject.physicsImpostor,\r\n        {\r\n            mass: jsonObject.physicsMass,\r\n            friction: jsonObject.physicsFriction,\r\n            restitution: jsonObject.physicsRestitution,\r\n        },\r\n        scene\r\n    );\r\n};\r\n\r\n/**\r\n * Represents a physics imposter\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsImpostor {\r\n    /**\r\n     * The default object size of the imposter\r\n     */\r\n    public static DEFAULT_OBJECT_SIZE: Vector3 = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * The identity quaternion of the imposter\r\n     */\r\n    public static IDENTITY_QUATERNION = Quaternion.Identity();\r\n\r\n    /** @internal */\r\n    public _pluginData: any = {};\r\n\r\n    private _physicsEngine: Nullable<PhysicsEngineV1>;\r\n    //The native cannon/oimo/energy physics body object.\r\n    private _physicsBody: any;\r\n    private _bodyUpdateRequired: boolean = false;\r\n\r\n    private _onBeforePhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    private _onAfterPhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    /** @internal */\r\n    public _onPhysicsCollideCallbacks: Array<{\r\n        callback: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>, distance: number, impulse: number, normal: Nullable<Vector3>) => void;\r\n        otherImpostors: Array<PhysicsImpostor>;\r\n    }> = [];\r\n\r\n    private _deltaPosition: Vector3 = Vector3.Zero();\r\n    private _deltaRotation: Quaternion;\r\n    private _deltaRotationConjugated: Quaternion;\r\n\r\n    /** @internal */\r\n    public _isFromLine: boolean;\r\n\r\n    //If set, this is this impostor's parent\r\n    private _parent: Nullable<PhysicsImpostor>;\r\n\r\n    private _isDisposed = false;\r\n\r\n    private static _TmpVecs: Vector3[] = BuildArray(3, Vector3.Zero);\r\n    private static _TmpQuat: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Specifies if the physics imposter is disposed\r\n     */\r\n    get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets the mass of the physics imposter\r\n     */\r\n    get mass(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\r\n    }\r\n\r\n    set mass(value: number) {\r\n        this.setMass(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of friction\r\n     */\r\n    get friction(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of friction\r\n     */\r\n    set friction(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of restitution\r\n     */\r\n    get restitution(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of restitution\r\n     */\r\n    set restitution(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get pressure(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPressure!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set pressure(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return;\r\n        }\r\n        plugin.setBodyPressure(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get stiffness(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyStiffness) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyStiffness(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set stiffness(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyStiffness) {\r\n            return;\r\n        }\r\n        plugin.setBodyStiffness(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get velocityIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyVelocityIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyVelocityIterations(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set velocityIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyVelocityIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyVelocityIterations(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get positionIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyPositionIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPositionIterations(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set positionIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPositionIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyPositionIterations(this, value);\r\n    }\r\n\r\n    /**\r\n     * The unique id of the physics imposter\r\n     * set by the physics engine when adding this impostor to the array\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public soft: boolean = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public segments: number = 0;\r\n\r\n    private _joints: Array<{\r\n        joint: PhysicsJoint;\r\n        otherImpostor: PhysicsImpostor;\r\n    }>;\r\n\r\n    /**\r\n     * Initializes the physics imposter\r\n     * @param object The physics-enabled object used as the physics imposter\r\n     * @param type The type of the physics imposter. Types are available as static members of this class.\r\n     * @param _options The options for the physics imposter\r\n     * @param _scene The Babylon scene\r\n     */\r\n    constructor(\r\n        /**\r\n         * The physics-enabled object used as the physics imposter\r\n         */\r\n        public object: IPhysicsEnabledObject,\r\n        /**\r\n         * The type of the physics imposter\r\n         */\r\n        public type: number,\r\n        private _options: PhysicsImpostorParameters = { mass: 0 },\r\n        private _scene?: Scene\r\n    ) {\r\n        //sanity check!\r\n        if (!this.object) {\r\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\r\n            return;\r\n        }\r\n        if (this.object.parent && _options.mass !== 0) {\r\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\r\n        }\r\n\r\n        // Legacy support for old syntax.\r\n        if (!this._scene && object.getScene) {\r\n            this._scene = object.getScene();\r\n        }\r\n\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n\r\n        if (this.type > 100) {\r\n            this.soft = true;\r\n        }\r\n\r\n        this._physicsEngine = this._scene.getPhysicsEngine() as any;\r\n        if (!this._physicsEngine) {\r\n            Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\r\n        } else {\r\n            //set the object's quaternion, if not set\r\n            if (!this.object.rotationQuaternion) {\r\n                if (this.object.rotation) {\r\n                    this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\r\n                } else {\r\n                    this.object.rotationQuaternion = new Quaternion();\r\n                }\r\n            }\r\n            //default options params\r\n            this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\r\n            this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\r\n            this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\r\n            if (this.soft) {\r\n                //softbody mass must be above 0;\r\n                this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\r\n                this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\r\n                this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\r\n                this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\r\n                this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\r\n                this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\r\n                this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\r\n                this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\r\n                this._options.path = _options.path === void 0 ? null : _options.path;\r\n                this._options.shape = _options.shape === void 0 ? null : _options.shape;\r\n            }\r\n            this._joints = [];\r\n            //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\r\n            if (!this.object.parent || this._options.ignoreParent) {\r\n                this._init();\r\n            } else if (this.object.parent.physicsImpostor) {\r\n                Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will completely initialize this impostor.\r\n     * It will create a new body - but only if this mesh has no parent.\r\n     * If it has, this impostor will not be used other than to define the impostor\r\n     * of the child mesh.\r\n     * @internal\r\n     */\r\n    public _init() {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._physicsEngine.removeImpostor(this);\r\n        this.physicsBody = null;\r\n        this._parent = this._parent || this._getPhysicsParent();\r\n        if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\r\n            this._physicsEngine.addImpostor(this);\r\n        }\r\n    }\r\n\r\n    private _getPhysicsParent(): Nullable<PhysicsImpostor> {\r\n        if (this.object.parent instanceof AbstractMesh) {\r\n            const parentMesh: AbstractMesh = this.object.parent;\r\n            return parentMesh.physicsImpostor;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Should a new body be generated.\r\n     * @returns boolean specifying if body initialization is required\r\n     */\r\n    public isBodyInitRequired(): boolean {\r\n        return this._bodyUpdateRequired || (!this._physicsBody && (!this._parent || !!this._options.ignoreParent));\r\n    }\r\n\r\n    /**\r\n     * Sets the updated scaling\r\n     */\r\n    public setScalingUpdated() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Force a regeneration of this or the parent's impostor's body.\r\n     * Use with caution - This will remove all previously-instantiated joints.\r\n     */\r\n    public forceUpdate() {\r\n        this._init();\r\n        if (this.parent && !this._options.ignoreParent) {\r\n            this.parent.forceUpdate();\r\n        }\r\n    }\r\n\r\n    /*public get mesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }*/\r\n\r\n    /**\r\n     * Gets the body that holds this impostor. Either its own, or its parent.\r\n     */\r\n    public get physicsBody(): any {\r\n        return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\r\n    }\r\n\r\n    /**\r\n     * Get the parent of the physics imposter\r\n     * @returns Physics imposter or null\r\n     */\r\n    public get parent(): Nullable<PhysicsImpostor> {\r\n        return !this._options.ignoreParent && this._parent ? this._parent : null;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent of the physics imposter\r\n     */\r\n    public set parent(value: Nullable<PhysicsImpostor>) {\r\n        this._parent = value;\r\n    }\r\n\r\n    /**\r\n     * Set the physics body. Used mainly by the physics engine/plugin\r\n     */\r\n    public set physicsBody(physicsBody: any) {\r\n        if (this._physicsBody && this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\r\n        }\r\n        this._physicsBody = physicsBody;\r\n        this.resetUpdateFlags();\r\n    }\r\n\r\n    /**\r\n     * Resets the update flags\r\n     */\r\n    public resetUpdateFlags() {\r\n        this._bodyUpdateRequired = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the object extents\r\n     * @returns the object extents\r\n     */\r\n    public getObjectExtents(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const q = this.object.rotationQuaternion;\r\n            const scaling = this.object.scaling.clone();\r\n            //reset rotation\r\n            this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\r\n            //calculate the world matrix with no rotation\r\n            const worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            if (worldMatrix) {\r\n                worldMatrix.decompose(scaling, undefined, undefined);\r\n            }\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            // get the global scaling of the object\r\n            const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\r\n            size.x = Math.abs(size.x);\r\n            size.y = Math.abs(size.y);\r\n            size.z = Math.abs(size.z);\r\n            //bring back the rotation\r\n            this.object.rotationQuaternion = q;\r\n            //calculate the world matrix with the new rotation\r\n            if (this.object.computeWorldMatrix) {\r\n                this.object.computeWorldMatrix(true);\r\n            }\r\n            return size;\r\n        } else {\r\n            return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the object center\r\n     * @returns The object center\r\n     */\r\n    public getObjectCenter(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            return boundingInfo.boundingBox.centerWorld;\r\n        } else {\r\n            return this.object.position;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a specific parameter from the options parameters\r\n     * @param paramName The object parameter name\r\n     * @returns The object parameter\r\n     */\r\n    public getParam(paramName: string): any {\r\n        return (<any>this._options)[paramName];\r\n    }\r\n\r\n    /**\r\n     * Sets a specific parameter in the options given to the physics plugin\r\n     * @param paramName The parameter name\r\n     * @param value The value of the parameter\r\n     */\r\n    public setParam(paramName: string, value: number) {\r\n        (<any>this._options)[paramName] = value;\r\n        this._bodyUpdateRequired = true;\r\n    }\r\n\r\n    /**\r\n     * Specifically change the body's mass. Won't recreate the physics body object\r\n     * @param mass The mass of the physics imposter\r\n     */\r\n    public setMass(mass: number) {\r\n        if (this.getParam(\"mass\") !== mass) {\r\n            this.setParam(\"mass\", mass);\r\n        }\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity\r\n     * @returns  linear velocity or null\r\n     */\r\n    public getLinearVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity\r\n     * @param velocity  linear velocity or null\r\n     */\r\n    public setLinearVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity\r\n     * @returns angular velocity or null\r\n     */\r\n    public getAngularVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity\r\n     * @param velocity The velocity or null\r\n     */\r\n    public setAngularVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a function with the physics plugin native code\r\n     * Provide a function the will have two variables - the world object and the physics body object\r\n     * @param func The function to execute with the physics plugin native code\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsBody: any) => void) {\r\n        if (this._physicsEngine) {\r\n            func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public registerBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onBeforePhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregister a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public unregisterBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onBeforePhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onBeforePhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public registerAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onAfterPhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public unregisterAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onAfterPhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onAfterPhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * register a function that will be executed when this impostor collides against a different body\r\n     * @param collideAgainst Physics imposter, or array of physics imposters to collide against\r\n     * @param func Callback that is executed on collision\r\n     */\r\n    public registerOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\r\n        this._onPhysicsCollideCallbacks.push({ callback: func, otherImpostors: collidedAgainstList });\r\n    }\r\n\r\n    /**\r\n     * Unregisters the physics imposter's collision callback\r\n     * @param collideAgainst The physics object to collide against\r\n     * @param func Callback to execute on collision\r\n     */\r\n    public unregisterOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor | Array<PhysicsImpostor>, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\r\n        let index = -1;\r\n        const found = this._onPhysicsCollideCallbacks.some((cbDef, idx) => {\r\n            if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\r\n                // chcek the arrays match\r\n                const sameList = cbDef.otherImpostors.every((impostor) => {\r\n                    return collidedAgainstList.indexOf(impostor) > -1;\r\n                });\r\n                if (sameList) {\r\n                    index = idx;\r\n                }\r\n                return sameList;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (found) {\r\n            this._onPhysicsCollideCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    //temp variables for parent rotation calculations\r\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\r\n    private _tmpQuat: Quaternion = new Quaternion();\r\n    private _tmpQuat2: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Get the parent rotation\r\n     * @returns The parent rotation\r\n     */\r\n    public getParentsRotation(): Quaternion {\r\n        let parent = this.object.parent;\r\n        this._tmpQuat.copyFromFloats(0, 0, 0, 1);\r\n        while (parent) {\r\n            if (parent.rotationQuaternion) {\r\n                this._tmpQuat2.copyFrom(parent.rotationQuaternion);\r\n            } else {\r\n                Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\r\n            }\r\n            this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\r\n            parent = parent.parent;\r\n        }\r\n        return this._tmpQuat;\r\n    }\r\n\r\n    /**\r\n     * this function is executed by the physics engine.\r\n     */\r\n    public beforeStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this.object.translate(this._deltaPosition, -1);\r\n        if (this._deltaRotationConjugated && this.object.rotationQuaternion) {\r\n            this.object.rotationQuaternion.multiplyToRef(this._deltaRotationConjugated, this.object.rotationQuaternion);\r\n        }\r\n        this.object.computeWorldMatrix(false);\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this._tmpQuat);\r\n        } else {\r\n            this._tmpQuat.copyFrom(this.object.rotationQuaternion || new Quaternion());\r\n        }\r\n        if (!this._options.disableBidirectionalTransformation) {\r\n            if (this.object.rotationQuaternion) {\r\n                this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(this, /*bInfo.boundingBox.centerWorld*/ this.object.getAbsolutePosition(), this._tmpQuat);\r\n            }\r\n        }\r\n\r\n        for (const func of this._onBeforePhysicsStepCallbacks) {\r\n            func(this);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * this function is executed by the physics engine\r\n     */\r\n    public afterStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        for (const func of this._onAfterPhysicsStepCallbacks) {\r\n            func(this);\r\n        }\r\n\r\n        this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(this);\r\n        // object has now its world rotation. needs to be converted to local.\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.conjugateInPlace();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this.object.rotationQuaternion);\r\n        }\r\n        // take the position set and make it the absolute position of this object.\r\n        this.object.setAbsolutePosition(this.object.position);\r\n        if (this._deltaRotation) {\r\n            if (this.object.rotationQuaternion) {\r\n                this.object.rotationQuaternion.multiplyToRef(this._deltaRotation, this.object.rotationQuaternion);\r\n            }\r\n            this._deltaPosition.applyRotationQuaternionToRef(this._deltaRotation, PhysicsImpostor._TmpVecs[0]);\r\n            this.object.translate(PhysicsImpostor._TmpVecs[0], 1);\r\n        } else {\r\n            this.object.translate(this._deltaPosition, 1);\r\n        }\r\n        this.object.computeWorldMatrix(true);\r\n    };\r\n\r\n    /**\r\n     * Legacy collision detection event support\r\n     */\r\n    public onCollideEvent: Nullable<(collider: PhysicsImpostor, collidedWith: PhysicsImpostor) => void> = null;\r\n\r\n    /**\r\n     *  define an onCollide function to call when this impostor collides against a different body\r\n     * @param e collide event data\r\n     */\r\n    public onCollide = (e: { body: any; point: Nullable<Vector3>; distance: number; impulse: number; normal: Nullable<Vector3> }) => {\r\n        if (!this._onPhysicsCollideCallbacks.length && !this.onCollideEvent) {\r\n            return;\r\n        }\r\n\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const otherImpostor = this._physicsEngine.getImpostorWithPhysicsBody(e.body);\r\n        if (otherImpostor) {\r\n            // Legacy collision detection event support\r\n            if (this.onCollideEvent) {\r\n                this.onCollideEvent(this, otherImpostor);\r\n            }\r\n            const callbacks = this._onPhysicsCollideCallbacks.filter((obj) => {\r\n                return obj.otherImpostors.indexOf(<PhysicsImpostor>otherImpostor) !== -1;\r\n            });\r\n\r\n            for (const obj of callbacks) {\r\n                obj.callback(this, <PhysicsImpostor>otherImpostor, e.point, e.distance, e.impulse, e.normal);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Apply a force\r\n     * @param force The force to apply\r\n     * @param contactPoint The contact point for the force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyForce(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply an impulse\r\n     * @param force The impulse force\r\n     * @param contactPoint The contact point for the impulse force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyImpulse(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A help function to create a joint\r\n     * @param otherImpostor A physics imposter used to create a joint\r\n     * @param jointType The type of joint\r\n     * @param jointData The data for the joint\r\n     * @returns The physics imposter\r\n     */\r\n    public createJoint(otherImpostor: PhysicsImpostor, jointType: number, jointData: PhysicsJointData): PhysicsImpostor {\r\n        const joint = new PhysicsJoint(jointType, jointData);\r\n        this.addJoint(otherImpostor, joint);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a joint to this impostor with a different impostor\r\n     * @param otherImpostor A physics imposter used to add a joint\r\n     * @param joint The joint to add\r\n     * @returns The physics imposter\r\n     */\r\n    public addJoint(otherImpostor: PhysicsImpostor, joint: PhysicsJoint): PhysicsImpostor {\r\n        this._joints.push({\r\n            otherImpostor: otherImpostor,\r\n            joint: joint,\r\n        });\r\n\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.addJoint(this, otherImpostor, joint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add an anchor to a cloth impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param width ratio across width from 0 to 1\r\n     * @param height ratio up height from 0 to 1\r\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\r\n     * @returns impostor the soft imposter\r\n     */\r\n    public addAnchor(otherImpostor: PhysicsImpostor, width: number, height: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendAnchor(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a hook to a rope impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param length ratio across rope from 0 to 1\r\n     * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n     * @returns impostor the rope imposter\r\n     */\r\n    public addHook(otherImpostor: PhysicsImpostor, length: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendHook!(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Will keep this body still, in a sleep mode.\r\n     * @returns the physics imposter\r\n     */\r\n    public sleep(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().sleepBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Wake the body up.\r\n     * @returns The physics imposter\r\n     */\r\n    public wakeUp(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the physics imposter\r\n     * @param newObject The physics imposter clones to this physics-enabled object\r\n     * @returns A nullable physics imposter\r\n     */\r\n    public clone(newObject: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        if (!newObject) {\r\n            return null;\r\n        }\r\n        return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\r\n    }\r\n\r\n    /**\r\n     * Disposes the physics imposter\r\n     */\r\n    public dispose(/*disposeChildren: boolean = true*/) {\r\n        //no dispose if no physics engine is available.\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        for (const j of this._joints) {\r\n            if (this._physicsEngine) {\r\n                this._physicsEngine.removeJoint(this, j.otherImpostor, j.joint);\r\n            }\r\n        }\r\n        //dispose the physics body\r\n        this._physicsEngine.removeImpostor(this);\r\n        if (this.parent) {\r\n            this.parent.forceUpdate();\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the delta position\r\n     * @param position The delta position amount\r\n     */\r\n    public setDeltaPosition(position: Vector3) {\r\n        this._deltaPosition.copyFrom(position);\r\n    }\r\n\r\n    /**\r\n     * Sets the delta rotation\r\n     * @param rotation The delta rotation amount\r\n     */\r\n    public setDeltaRotation(rotation: Quaternion) {\r\n        if (!this._deltaRotation) {\r\n            this._deltaRotation = new Quaternion();\r\n        }\r\n        this._deltaRotation.copyFrom(rotation);\r\n        this._deltaRotationConjugated = this._deltaRotation.conjugate();\r\n    }\r\n\r\n    /**\r\n     * Gets the box size of the physics imposter and stores the result in the input parameter\r\n     * @param result Stores the box size\r\n     * @returns The physics imposter\r\n     */\r\n    public getBoxSizeToRef(result: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the radius of the physics imposter\r\n     * @returns Radius of the physics imposter\r\n     */\r\n    public getRadius(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sync a bone with this impostor\r\n     * @param bone The bone to sync to the impostor.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     */\r\n    public syncBoneWithImpostor(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion) {\r\n        const tempVec = PhysicsImpostor._TmpVecs[0];\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\r\n                bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\r\n            } else {\r\n                bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\r\n            }\r\n        }\r\n\r\n        tempVec.x = 0;\r\n        tempVec.y = 0;\r\n        tempVec.z = 0;\r\n\r\n        if (jointPivot) {\r\n            tempVec.x = jointPivot.x;\r\n            tempVec.y = jointPivot.y;\r\n            tempVec.z = jointPivot.z;\r\n\r\n            bone.getDirectionToRef(tempVec, boneMesh, tempVec);\r\n\r\n            if (distToJoint === undefined || distToJoint === null) {\r\n                distToJoint = jointPivot.length();\r\n            }\r\n\r\n            tempVec.x *= distToJoint;\r\n            tempVec.y *= distToJoint;\r\n            tempVec.z *= distToJoint;\r\n        }\r\n\r\n        if (bone.getParent()) {\r\n            tempVec.addInPlace(mesh.getAbsolutePosition());\r\n            bone.setAbsolutePosition(tempVec, boneMesh);\r\n        } else {\r\n            boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\r\n            boneMesh.position.x -= tempVec.x;\r\n            boneMesh.position.y -= tempVec.y;\r\n            boneMesh.position.z -= tempVec.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sync impostor to a bone\r\n     * @param bone The bone that the impostor will be synced to.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     * @param boneAxis Optional vector3 axis the bone is aligned with\r\n     */\r\n    public syncImpostorWithBone(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion, boneAxis?: Vector3) {\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\r\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\r\n            } else {\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\r\n            }\r\n        }\r\n\r\n        const pos = PhysicsImpostor._TmpVecs[0];\r\n        const boneDir = PhysicsImpostor._TmpVecs[1];\r\n\r\n        if (!boneAxis) {\r\n            boneAxis = PhysicsImpostor._TmpVecs[2];\r\n            boneAxis.x = 0;\r\n            boneAxis.y = 1;\r\n            boneAxis.z = 0;\r\n        }\r\n\r\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\r\n        bone.getAbsolutePositionToRef(boneMesh, pos);\r\n\r\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\r\n            distToJoint = jointPivot.length();\r\n        }\r\n\r\n        if (distToJoint !== undefined && distToJoint !== null) {\r\n            pos.x += boneDir.x * distToJoint;\r\n            pos.y += boneDir.y * distToJoint;\r\n            pos.z += boneDir.z * distToJoint;\r\n        }\r\n\r\n        mesh.setAbsolutePosition(pos);\r\n    }\r\n\r\n    //Impostor types\r\n    /**\r\n     * No-Imposter type\r\n     */\r\n    public static NoImpostor = 0;\r\n    /**\r\n     * Sphere-Imposter type\r\n     */\r\n    public static SphereImpostor = 1;\r\n    /**\r\n     * Box-Imposter type\r\n     */\r\n    public static BoxImpostor = 2;\r\n    /**\r\n     * Plane-Imposter type\r\n     */\r\n    public static PlaneImpostor = 3;\r\n    /**\r\n     * Mesh-imposter type (Only available to objects with vertices data)\r\n     */\r\n    public static MeshImpostor = 4;\r\n    /**\r\n     * Capsule-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static CapsuleImpostor = 6;\r\n    /**\r\n     * Cylinder-Imposter type\r\n     */\r\n    public static CylinderImpostor = 7;\r\n    /**\r\n     * Particle-Imposter type\r\n     */\r\n    public static ParticleImpostor = 8;\r\n    /**\r\n     * Heightmap-Imposter type\r\n     */\r\n    public static HeightmapImpostor = 9;\r\n    /**\r\n     * ConvexHull-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static ConvexHullImpostor = 10;\r\n    /**\r\n     * Custom-Imposter type (Ammo.js plugin only)\r\n     */\r\n    public static CustomImpostor = 100;\r\n    /**\r\n     * Rope-Imposter type\r\n     */\r\n    public static RopeImpostor = 101;\r\n    /**\r\n     * Cloth-Imposter type\r\n     */\r\n    public static ClothImpostor = 102;\r\n    /**\r\n     * Softbody-Imposter type\r\n     */\r\n    public static SoftbodyImpostor = 103;\r\n}\r\n", "import { Vector3 } from \"../Maths/math.vector\";\r\nimport type { PhysicsShape } from \"./v2/physicsShape\";\r\nimport type { PhysicsBody } from \"./v2/physicsBody\";\r\n\r\n/**\r\n * Base class for results of casts.\r\n */\r\nexport class CastingResult {\r\n    private _hasHit: boolean = false;\r\n    protected _hitNormal: Vector3 = Vector3.Zero();\r\n    protected _hitPoint: Vector3 = Vector3.Zero();\r\n    private _triangleIndex: number = -1;\r\n\r\n    /**\r\n     * The Physics body that the query hit.\r\n     */\r\n    public body?: PhysicsBody;\r\n    /**\r\n     * The body Index in case the Physics body is using instances\r\n     */\r\n    public bodyIndex?: number;\r\n\r\n    /**\r\n     * The shape hit by the query.\r\n     */\r\n    public shape?: PhysicsShape;\r\n\r\n    /**\r\n     * Gets the hit point.\r\n     */\r\n    get hitPoint(): Vector3 {\r\n        return this._hitPoint;\r\n    }\r\n    /**\r\n     * Gets the hit normal.\r\n     */\r\n    get hitNormal(): Vector3 {\r\n        return this._hitNormal;\r\n    }\r\n    /**\r\n     * Gets if there was a hit\r\n     */\r\n    get hasHit(): boolean {\r\n        return this._hasHit;\r\n    }\r\n\r\n    /*\r\n     * The index of the original triangle which was hit. Will be -1 if contact point is not on a mesh shape\r\n     */\r\n    get triangleIndex(): number {\r\n        return this._triangleIndex;\r\n    }\r\n\r\n    /**\r\n     * Sets the hit data\r\n     * @param hitNormal defines the normal in world space\r\n     * @param hitPoint defines the point in world space\r\n     * @param triangleIndex defines the index of the triangle in case of mesh shape\r\n     */\r\n    public setHitData(hitNormal: IXYZ, hitPoint: IXYZ, triangleIndex?: number) {\r\n        this._hasHit = true;\r\n        this._hitNormal.set(hitNormal.x, hitNormal.y, hitNormal.z);\r\n        this._hitPoint.set(hitPoint.x, hitPoint.y, hitPoint.z);\r\n        this._triangleIndex = triangleIndex ?? -1;\r\n    }\r\n\r\n    /**\r\n     * Resets all the values to default\r\n     */\r\n    public reset() {\r\n        this._hasHit = false;\r\n\r\n        this._hitNormal.setAll(0);\r\n        this._hitPoint.setAll(0);\r\n        this._triangleIndex = -1;\r\n\r\n        this.body = undefined;\r\n        this.bodyIndex = undefined;\r\n\r\n        this.shape = undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for the size containing width and height\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ninterface IXYZ {\r\n    /**\r\n     * X\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Y\r\n     */\r\n    y: number;\r\n\r\n    /**\r\n     * Z\r\n     */\r\n    z: number;\r\n}\r\n", "import { Vector3 } from \"../Maths/math.vector\";\r\nimport { CastingResult } from \"./castingResult\";\r\n\r\n/**\r\n * Interface for query parameters in the raycast function.\r\n * @see the \"Collision Filtering\" section in https://github.com/eoineoineoin/glTF/tree/MSFT_RigidBodies/extensions/2.0/Vendor/MSFT_collision_primitives\r\n */\r\nexport interface IRaycastQuery {\r\n    /** Membership mask */\r\n    membership?: number;\r\n    /** CollideWith mask */\r\n    collideWith?: number;\r\n    /** Should trigger collisions be considered in the query? */\r\n    shouldHitTriggers?: boolean;\r\n}\r\n\r\n/**\r\n * Holds the data for the raycast result\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsRaycastResult extends CastingResult {\r\n    private _hitDistance: number = 0;\r\n    private _rayFromWorld: Vector3 = Vector3.Zero();\r\n    private _rayToWorld: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets the distance from the hit\r\n     */\r\n    get hitDistance(): number {\r\n        return this._hitDistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit normal/direction in the world\r\n     */\r\n    get hitNormalWorld(): Vector3 {\r\n        return this._hitNormal;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit point in the world\r\n     */\r\n    get hitPointWorld(): Vector3 {\r\n        return this._hitPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"start point\" of the ray in the world\r\n     */\r\n    get rayFromWorld(): Vector3 {\r\n        return this._rayFromWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"end point\" of the ray in the world\r\n     */\r\n    get rayToWorld(): Vector3 {\r\n        return this._rayToWorld;\r\n    }\r\n\r\n    /**\r\n     * Sets the distance from the start point to the hit point\r\n     * @param distance defines the distance to set\r\n     */\r\n    public setHitDistance(distance: number) {\r\n        this._hitDistance = distance;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance manually\r\n     */\r\n    public calculateHitDistance() {\r\n        this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPoint);\r\n    }\r\n\r\n    /**\r\n     * Resets all the values to default\r\n     * @param from The from point on world space\r\n     * @param to The to point on world space\r\n     */\r\n    public override reset(from: Vector3 = Vector3.Zero(), to: Vector3 = Vector3.Zero()) {\r\n        super.reset();\r\n        this._rayFromWorld.copyFrom(from);\r\n        this._rayToWorld.copyFrom(to);\r\n\r\n        this._hitDistance = 0;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../../types\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { PhysicsImpostorJoint, IPhysicsEnginePlugin } from \"./IPhysicsEnginePlugin\";\r\nimport type { IPhysicsEngine } from \"../IPhysicsEngine\";\r\nimport type { PhysicsImpostor, IPhysicsEnabledObject } from \"./physicsImpostor\";\r\nimport type { PhysicsJoint } from \"./physicsJoint\";\r\nimport type { PhysicsRaycastResult } from \"../physicsRaycastResult\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\n\r\n/**\r\n * Class used to control physics engine\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/physics/usingPhysicsEngine\r\n */\r\nexport class PhysicsEngine implements IPhysicsEngine {\r\n    /**\r\n     * Global value used to control the smallest number supported by the simulation\r\n     */\r\n    private _impostors: Array<PhysicsImpostor> = [];\r\n    private _joints: Array<PhysicsImpostorJoint> = [];\r\n    private _subTimeStep: number = 0;\r\n    private _uniqueIdCounter = 0;\r\n\r\n    /**\r\n     * Gets the gravity vector used by the simulation\r\n     */\r\n    public gravity: Vector3;\r\n\r\n    /**\r\n     *\r\n     * @returns version\r\n     */\r\n    public getPluginVersion(): number {\r\n        return this._physicsPlugin.getPluginVersion();\r\n    }\r\n    /**\r\n     * @virtual\r\n     * Factory used to create the default physics plugin.\r\n     * @returns The default physics plugin\r\n     */\r\n    public static DefaultPluginFactory(): IPhysicsEnginePlugin {\r\n        throw _WarnImport(\"CannonJSPlugin\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new Physics Engine\r\n     * @param gravity defines the gravity vector used by the simulation\r\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\r\n     */\r\n    constructor(\r\n        gravity: Nullable<Vector3>,\r\n        private _physicsPlugin: IPhysicsEnginePlugin = PhysicsEngine.DefaultPluginFactory()\r\n    ) {\r\n        if (!this._physicsPlugin.isSupported()) {\r\n            throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\r\n        }\r\n        gravity = gravity || new Vector3(0, -9.807, 0);\r\n        this.setGravity(gravity);\r\n        this.setTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity vector used by the simulation\r\n     * @param gravity defines the gravity vector to use\r\n     */\r\n    public setGravity(gravity: Vector3): void {\r\n        this.gravity = gravity;\r\n        this._physicsPlugin.setGravity(this.gravity);\r\n    }\r\n\r\n    /**\r\n     * Set the time step of the physics engine.\r\n     * Default is 1/60.\r\n     * To slow it down, enter 1/600 for example.\r\n     * To speed it up, 1/30\r\n     * @param newTimeStep defines the new timestep to apply to this world.\r\n     */\r\n    public setTimeStep(newTimeStep: number = 1 / 60) {\r\n        this._physicsPlugin.setTimeStep(newTimeStep);\r\n    }\r\n\r\n    /**\r\n     * Get the time step of the physics engine.\r\n     * @returns the current time step\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._physicsPlugin.getTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Set the sub time step of the physics engine.\r\n     * Default is 0 meaning there is no sub steps\r\n     * To increase physics resolution precision, set a small value (like 1 ms)\r\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\r\n     */\r\n    public setSubTimeStep(subTimeStep: number = 0) {\r\n        this._subTimeStep = subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Get the sub time step of the physics engine.\r\n     * @returns the current sub time step\r\n     */\r\n    public getSubTimeStep() {\r\n        return this._subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        for (const impostor of this._impostors) {\r\n            impostor.dispose();\r\n        }\r\n        this._physicsPlugin.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current physics plugin\r\n     * @returns the name of the plugin\r\n     */\r\n    public getPhysicsPluginName(): string {\r\n        return this._physicsPlugin.name;\r\n    }\r\n\r\n    /**\r\n     * Adding a new impostor for the impostor tracking.\r\n     * This will be done by the impostor itself.\r\n     * @param impostor the impostor to add\r\n     */\r\n    public addImpostor(impostor: PhysicsImpostor) {\r\n        this._impostors.push(impostor);\r\n        impostor.uniqueId = this._uniqueIdCounter++;\r\n        //if no parent, generate the body\r\n        if (!impostor.parent) {\r\n            this._physicsPlugin.generatePhysicsBody(impostor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an impostor from the engine.\r\n     * This impostor and its mesh will not longer be updated by the physics engine.\r\n     * @param impostor the impostor to remove\r\n     */\r\n    public removeImpostor(impostor: PhysicsImpostor) {\r\n        const index = this._impostors.indexOf(impostor);\r\n        if (index > -1) {\r\n            const removed = this._impostors.splice(index, 1);\r\n            //Is it needed?\r\n            if (removed.length) {\r\n                this.getPhysicsPlugin().removePhysicsBody(impostor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a joint to the physics engine\r\n     * @param mainImpostor defines the main impostor to which the joint is added.\r\n     * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\r\n     * @param joint defines the joint that will connect both impostors.\r\n     */\r\n    public addJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        const impostorJoint = {\r\n            mainImpostor: mainImpostor,\r\n            connectedImpostor: connectedImpostor,\r\n            joint: joint,\r\n        };\r\n        joint.physicsPlugin = this._physicsPlugin;\r\n        this._joints.push(impostorJoint);\r\n        this._physicsPlugin.generateJoint(impostorJoint);\r\n    }\r\n\r\n    /**\r\n     * Removes a joint from the simulation\r\n     * @param mainImpostor defines the impostor used with the joint\r\n     * @param connectedImpostor defines the other impostor connected to the main one by the joint\r\n     * @param joint defines the joint to remove\r\n     */\r\n    public removeJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        const matchingJoints = this._joints.filter(function (impostorJoint) {\r\n            return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\r\n        });\r\n        if (matchingJoints.length) {\r\n            this._physicsPlugin.removeJoint(matchingJoints[0]);\r\n            //TODO remove it from the list as well\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called by the scene. No need to call it.\r\n     * @param delta defines the timespan between frames\r\n     */\r\n    public _step(delta: number) {\r\n        //check if any mesh has no body / requires an update\r\n        for (const impostor of this._impostors) {\r\n            if (impostor.isBodyInitRequired()) {\r\n                this._physicsPlugin.generatePhysicsBody(impostor);\r\n            }\r\n        }\r\n\r\n        if (delta > 0.1) {\r\n            delta = 0.1;\r\n        } else if (delta <= 0) {\r\n            delta = 1.0 / 60.0;\r\n        }\r\n\r\n        this._physicsPlugin.executeStep(delta, this._impostors);\r\n    }\r\n\r\n    /**\r\n     * Gets the current plugin used to run the simulation\r\n     * @returns current plugin\r\n     */\r\n    public getPhysicsPlugin(): IPhysicsEnginePlugin {\r\n        return this._physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of physic impostors\r\n     * @returns an array of PhysicsImpostor\r\n     */\r\n    public getImpostors(): Array<PhysicsImpostor> {\r\n        return this._impostors;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics enabled object\r\n     * @param object defines the object impersonated by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorForPhysicsObject(object: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        for (let i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].object === object) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics body object\r\n     * @param body defines physics body used by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorWithPhysicsBody(body: any): Nullable<PhysicsImpostor> {\r\n        for (let i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].physicsBody === body) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @returns PhysicsRaycastResult\r\n     */\r\n    public raycast(from: Vector3, to: Vector3): PhysicsRaycastResult {\r\n        return this._physicsPlugin.raycast(from, to);\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @param result resulting PhysicsRaycastResult\r\n     * @returns true if the ray hits an impostor, else false\r\n     */\r\n    public raycastToRef(from: Vector3, to: Vector3, result: PhysicsRaycastResult) {\r\n        return this._physicsPlugin.raycastToRef(from, to, result);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable, FloatArray } from \"../../../types\";\r\nimport { Logger } from \"../../../Misc/logger\";\r\nimport { Vector3, Matrix, Quaternion } from \"../../../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../../../Buffers/buffer\";\r\nimport type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport type { IPhysicsEnginePlugin, PhysicsImpostorJoint } from \"../IPhysicsEnginePlugin\";\r\nimport type { IPhysicsEnabledObject } from \"../physicsImpostor\";\r\nimport { PhysicsImpostor } from \"../physicsImpostor\";\r\nimport type { IMotorEnabledJoint, DistanceJointData, SpringJointData } from \"../physicsJoint\";\r\nimport { PhysicsJoint } from \"../physicsJoint\";\r\nimport { PhysicsRaycastResult } from \"../../physicsRaycastResult\";\r\nimport type { TransformNode } from \"../../../Meshes/transformNode\";\r\nimport { PhysicsEngine } from \"../physicsEngine\";\r\nimport { Epsilon } from \"../../../Maths/math.constants\";\r\n\r\n//declare var require: any;\r\ndeclare let CANNON: any;\r\n\r\n/** @internal */\r\nexport class CannonJSPlugin implements IPhysicsEnginePlugin {\r\n    public world: any;\r\n    public name: string = \"CannonJSPlugin\";\r\n    private _physicsMaterials: any[] = [];\r\n    private _fixedTimeStep: number = 1 / 60;\r\n    private _cannonRaycastResult: any;\r\n    private _raycastResult: PhysicsRaycastResult;\r\n    private _physicsBodiesToRemoveAfterStep = new Array<any>();\r\n    private _firstFrame = true;\r\n    private _tmpQuaternion: Quaternion = new Quaternion();\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public BJSCANNON: any;\r\n\r\n    public constructor(\r\n        private _useDeltaForWorldStep: boolean = true,\r\n        iterations: number = 10,\r\n        cannonInjection = CANNON\r\n    ) {\r\n        this.BJSCANNON = cannonInjection;\r\n        if (!this.isSupported()) {\r\n            Logger.Error(\"CannonJS is not available. Please make sure you included the js file.\");\r\n            return;\r\n        }\r\n\r\n        this._extendNamespace();\r\n\r\n        this.world = new this.BJSCANNON.World();\r\n        this.world.broadphase = new this.BJSCANNON.NaiveBroadphase();\r\n        this.world.solver.iterations = iterations;\r\n        this._cannonRaycastResult = new this.BJSCANNON.RaycastResult();\r\n        this._raycastResult = new PhysicsRaycastResult();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns plugin version\r\n     */\r\n    public getPluginVersion(): number {\r\n        return 1;\r\n    }\r\n\r\n    public setGravity(gravity: Vector3): void {\r\n        const vec = gravity;\r\n        this.world.gravity.set(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    public setTimeStep(timeStep: number) {\r\n        this._fixedTimeStep = timeStep;\r\n    }\r\n\r\n    public getTimeStep(): number {\r\n        return this._fixedTimeStep;\r\n    }\r\n\r\n    public executeStep(delta: number, impostors: Array<PhysicsImpostor>): void {\r\n        // due to cannon's architecture, the first frame's before-step is skipped.\r\n        if (this._firstFrame) {\r\n            this._firstFrame = false;\r\n            for (const impostor of impostors) {\r\n                if (!(impostor.type == PhysicsImpostor.HeightmapImpostor || impostor.type === PhysicsImpostor.PlaneImpostor)) {\r\n                    impostor.beforeStep();\r\n                }\r\n            }\r\n        }\r\n        this.world.step(this._useDeltaForWorldStep ? delta : this._fixedTimeStep);\r\n        this._removeMarkedPhysicsBodiesFromWorld();\r\n    }\r\n\r\n    private _removeMarkedPhysicsBodiesFromWorld(): void {\r\n        if (this._physicsBodiesToRemoveAfterStep.length > 0) {\r\n            for (const physicsBody of this._physicsBodiesToRemoveAfterStep) {\r\n                if (typeof this.world.removeBody === \"function\") {\r\n                    this.world.removeBody(physicsBody);\r\n                } else {\r\n                    this.world.remove(physicsBody);\r\n                }\r\n            }\r\n            this._physicsBodiesToRemoveAfterStep.length = 0;\r\n        }\r\n    }\r\n\r\n    public applyImpulse(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) {\r\n        const worldPoint = new this.BJSCANNON.Vec3(contactPoint.x, contactPoint.y, contactPoint.z);\r\n        const impulse = new this.BJSCANNON.Vec3(force.x, force.y, force.z);\r\n\r\n        impostor.physicsBody.applyImpulse(impulse, worldPoint);\r\n    }\r\n\r\n    public applyForce(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) {\r\n        const worldPoint = new this.BJSCANNON.Vec3(contactPoint.x, contactPoint.y, contactPoint.z);\r\n        const impulse = new this.BJSCANNON.Vec3(force.x, force.y, force.z);\r\n\r\n        impostor.physicsBody.applyForce(impulse, worldPoint);\r\n    }\r\n\r\n    public generatePhysicsBody(impostor: PhysicsImpostor) {\r\n        // When calling forceUpdate generatePhysicsBody is called again, ensure that the updated body does not instantly collide with removed body\r\n        this._removeMarkedPhysicsBodiesFromWorld();\r\n\r\n        //parent-child relationship. Does this impostor have a parent impostor?\r\n        if (impostor.parent) {\r\n            if (impostor.physicsBody) {\r\n                this.removePhysicsBody(impostor);\r\n                //TODO is that needed?\r\n                impostor.forceUpdate();\r\n            }\r\n            return;\r\n        }\r\n\r\n        //should a new body be created for this impostor?\r\n        if (impostor.isBodyInitRequired()) {\r\n            const shape = this._createShape(impostor);\r\n            if (!shape) {\r\n                Logger.Warn(\"It was not possible to create a physics body for this object.\");\r\n                return;\r\n            }\r\n\r\n            //unregister events if body is being changed\r\n            const oldBody = impostor.physicsBody;\r\n            if (oldBody) {\r\n                this.removePhysicsBody(impostor);\r\n            }\r\n\r\n            //create the body and material\r\n            const material = this._addMaterial(\"mat-\" + impostor.uniqueId, impostor.getParam(\"friction\"), impostor.getParam(\"restitution\"));\r\n\r\n            const bodyCreationObject = {\r\n                mass: impostor.getParam(\"mass\"),\r\n                material: material,\r\n            };\r\n            // A simple extend, in case native options were used.\r\n            const nativeOptions = impostor.getParam(\"nativeOptions\");\r\n            for (const key in nativeOptions) {\r\n                if (Object.prototype.hasOwnProperty.call(nativeOptions, key)) {\r\n                    (<any>bodyCreationObject)[key] = nativeOptions[key];\r\n                }\r\n            }\r\n            impostor.physicsBody = new this.BJSCANNON.Body(bodyCreationObject);\r\n            impostor.physicsBody.addEventListener(\"collide\", impostor.onCollide);\r\n            this.world.addEventListener(\"preStep\", impostor.beforeStep);\r\n            this.world.addEventListener(\"postStep\", impostor.afterStep);\r\n            impostor.physicsBody.addShape(shape);\r\n            if (typeof this.world.addBody === \"function\") {\r\n                this.world.addBody(impostor.physicsBody);\r\n            } else {\r\n                this.world.add(impostor.physicsBody);\r\n            }\r\n\r\n            //try to keep the body moving in the right direction by taking old properties.\r\n            //Should be tested!\r\n            if (oldBody) {\r\n                const props = [\"force\", \"torque\", \"velocity\", \"angularVelocity\"];\r\n                for (const param of props) {\r\n                    const vec = oldBody[param];\r\n                    impostor.physicsBody[param].set(vec.x, vec.y, vec.z);\r\n                }\r\n            }\r\n            this._processChildMeshes(impostor);\r\n        }\r\n\r\n        //now update the body's transformation\r\n        this._updatePhysicsBodyTransformation(impostor);\r\n    }\r\n\r\n    private _processChildMeshes(mainImpostor: PhysicsImpostor) {\r\n        const meshChildren = mainImpostor.object.getChildMeshes ? mainImpostor.object.getChildMeshes(true) : [];\r\n        const mainRotation: Nullable<Quaternion> = mainImpostor.object.rotationQuaternion;\r\n        if (mainRotation) {\r\n            mainRotation.conjugateToRef(this._tmpQuaternion);\r\n        } else {\r\n            this._tmpQuaternion.set(0, 0, 0, 1);\r\n        }\r\n\r\n        if (meshChildren.length) {\r\n            const processMesh = (mesh: AbstractMesh) => {\r\n                if (!mesh.rotationQuaternion) {\r\n                    return;\r\n                }\r\n\r\n                const childImpostor = mesh.getPhysicsImpostor();\r\n                if (childImpostor) {\r\n                    const parent = childImpostor.parent;\r\n                    if (parent !== mainImpostor && mesh.parent) {\r\n                        const pPosition = mesh.getAbsolutePosition().subtract((mesh.parent as TransformNode).getAbsolutePosition());\r\n                        const q = mesh.rotationQuaternion.multiply(this._tmpQuaternion);\r\n\r\n                        if (childImpostor.physicsBody) {\r\n                            this.removePhysicsBody(childImpostor);\r\n                            childImpostor.physicsBody = null;\r\n                        }\r\n                        childImpostor.parent = mainImpostor;\r\n                        childImpostor.resetUpdateFlags();\r\n                        mainImpostor.physicsBody.addShape(\r\n                            this._createShape(childImpostor),\r\n                            new this.BJSCANNON.Vec3(pPosition.x, pPosition.y, pPosition.z),\r\n                            new this.BJSCANNON.Quaternion(q.x, q.y, q.z, q.w)\r\n                        );\r\n                        //Add the mass of the children.\r\n                        mainImpostor.physicsBody.mass += childImpostor.getParam(\"mass\");\r\n                    }\r\n                }\r\n                const meshes = mesh.getChildMeshes(true).filter((m) => !!m.physicsImpostor);\r\n\r\n                for (const mesh of meshes) {\r\n                    processMesh(mesh);\r\n                }\r\n            };\r\n            const meshes = meshChildren.filter((m) => !!m.physicsImpostor);\r\n\r\n            for (const mesh of meshes) {\r\n                processMesh(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    public removePhysicsBody(impostor: PhysicsImpostor) {\r\n        impostor.physicsBody.removeEventListener(\"collide\", impostor.onCollide);\r\n        this.world.removeEventListener(\"preStep\", impostor.beforeStep);\r\n        this.world.removeEventListener(\"postStep\", impostor.afterStep);\r\n\r\n        // Only remove the physics body after the physics step to avoid disrupting cannon's internal state\r\n        if (this._physicsBodiesToRemoveAfterStep.indexOf(impostor.physicsBody) === -1) {\r\n            this._physicsBodiesToRemoveAfterStep.push(impostor.physicsBody);\r\n        }\r\n    }\r\n\r\n    public generateJoint(impostorJoint: PhysicsImpostorJoint) {\r\n        const mainBody = impostorJoint.mainImpostor.physicsBody;\r\n        const connectedBody = impostorJoint.connectedImpostor.physicsBody;\r\n        if (!mainBody || !connectedBody) {\r\n            return;\r\n        }\r\n        let constraint: any;\r\n        const jointData = impostorJoint.joint.jointData;\r\n        //TODO - https://github.com/schteppe/this.BJSCANNON.js/blob/gh-pages/demos/collisionFilter.html\r\n        const constraintData = {\r\n            pivotA: jointData.mainPivot ? new this.BJSCANNON.Vec3().set(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z) : null,\r\n            pivotB: jointData.connectedPivot ? new this.BJSCANNON.Vec3().set(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z) : null,\r\n            axisA: jointData.mainAxis ? new this.BJSCANNON.Vec3().set(jointData.mainAxis.x, jointData.mainAxis.y, jointData.mainAxis.z) : null,\r\n            axisB: jointData.connectedAxis ? new this.BJSCANNON.Vec3().set(jointData.connectedAxis.x, jointData.connectedAxis.y, jointData.connectedAxis.z) : null,\r\n            maxForce: jointData.nativeParams.maxForce,\r\n            collideConnected: !!jointData.collision,\r\n        };\r\n        switch (impostorJoint.joint.type) {\r\n            case PhysicsJoint.HingeJoint:\r\n            case PhysicsJoint.Hinge2Joint:\r\n                constraint = new this.BJSCANNON.HingeConstraint(mainBody, connectedBody, constraintData);\r\n                break;\r\n            case PhysicsJoint.DistanceJoint:\r\n                constraint = new this.BJSCANNON.DistanceConstraint(mainBody, connectedBody, (<DistanceJointData>jointData).maxDistance || 2);\r\n                break;\r\n            case PhysicsJoint.SpringJoint: {\r\n                const springData = <SpringJointData>jointData;\r\n                constraint = new this.BJSCANNON.Spring(mainBody, connectedBody, {\r\n                    restLength: springData.length,\r\n                    stiffness: springData.stiffness,\r\n                    damping: springData.damping,\r\n                    localAnchorA: constraintData.pivotA,\r\n                    localAnchorB: constraintData.pivotB,\r\n                });\r\n                break;\r\n            }\r\n            case PhysicsJoint.LockJoint:\r\n                constraint = new this.BJSCANNON.LockConstraint(mainBody, connectedBody, constraintData);\r\n                break;\r\n            case PhysicsJoint.PointToPointJoint:\r\n            case PhysicsJoint.BallAndSocketJoint:\r\n            default:\r\n                constraint = new this.BJSCANNON.PointToPointConstraint(mainBody, constraintData.pivotA, connectedBody, constraintData.pivotB, constraintData.maxForce);\r\n                break;\r\n        }\r\n        //set the collideConnected flag after the creation, since DistanceJoint ignores it.\r\n        constraint.collideConnected = !!jointData.collision;\r\n        impostorJoint.joint.physicsJoint = constraint;\r\n        //don't add spring as constraint, as it is not one.\r\n        if (impostorJoint.joint.type !== PhysicsJoint.SpringJoint) {\r\n            this.world.addConstraint(constraint);\r\n        } else {\r\n            (<SpringJointData>impostorJoint.joint.jointData).forceApplicationCallback =\r\n                (<SpringJointData>impostorJoint.joint.jointData).forceApplicationCallback ||\r\n                function () {\r\n                    constraint.applyForce();\r\n                };\r\n            impostorJoint.mainImpostor.registerAfterPhysicsStep((<SpringJointData>impostorJoint.joint.jointData).forceApplicationCallback);\r\n        }\r\n    }\r\n\r\n    public removeJoint(impostorJoint: PhysicsImpostorJoint) {\r\n        if (impostorJoint.joint.type !== PhysicsJoint.SpringJoint) {\r\n            this.world.removeConstraint(impostorJoint.joint.physicsJoint);\r\n        } else {\r\n            impostorJoint.mainImpostor.unregisterAfterPhysicsStep((<SpringJointData>impostorJoint.joint.jointData).forceApplicationCallback);\r\n        }\r\n    }\r\n\r\n    private _addMaterial(name: string, friction: number, restitution: number) {\r\n        let index;\r\n        let mat;\r\n\r\n        for (index = 0; index < this._physicsMaterials.length; index++) {\r\n            mat = this._physicsMaterials[index];\r\n\r\n            if (mat.friction === friction && mat.restitution === restitution) {\r\n                return mat;\r\n            }\r\n        }\r\n\r\n        const currentMat = new this.BJSCANNON.Material(name);\r\n        currentMat.friction = friction;\r\n        currentMat.restitution = restitution;\r\n\r\n        this._physicsMaterials.push(currentMat);\r\n        return currentMat;\r\n    }\r\n\r\n    private _checkWithEpsilon(value: number): number {\r\n        return value < Epsilon ? Epsilon : value;\r\n    }\r\n\r\n    private _createShape(impostor: PhysicsImpostor) {\r\n        const object = impostor.object;\r\n\r\n        let returnValue;\r\n        const impostorExtents = impostor.getObjectExtents();\r\n        switch (impostor.type) {\r\n            case PhysicsImpostor.SphereImpostor: {\r\n                const radiusX = impostorExtents.x;\r\n                const radiusY = impostorExtents.y;\r\n                const radiusZ = impostorExtents.z;\r\n\r\n                returnValue = new this.BJSCANNON.Sphere(Math.max(this._checkWithEpsilon(radiusX), this._checkWithEpsilon(radiusY), this._checkWithEpsilon(radiusZ)) / 2);\r\n\r\n                break;\r\n            }\r\n            //TMP also for cylinder - TODO Cannon supports cylinder natively.\r\n            case PhysicsImpostor.CylinderImpostor: {\r\n                let nativeParams = impostor.getParam(\"nativeOptions\");\r\n                if (!nativeParams) {\r\n                    nativeParams = {};\r\n                }\r\n                const radiusTop = nativeParams.radiusTop !== undefined ? nativeParams.radiusTop : this._checkWithEpsilon(impostorExtents.x) / 2;\r\n                const radiusBottom = nativeParams.radiusBottom !== undefined ? nativeParams.radiusBottom : this._checkWithEpsilon(impostorExtents.x) / 2;\r\n                const height = nativeParams.height !== undefined ? nativeParams.height : this._checkWithEpsilon(impostorExtents.y);\r\n                const numSegments = nativeParams.numSegments !== undefined ? nativeParams.numSegments : 16;\r\n                returnValue = new this.BJSCANNON.Cylinder(radiusTop, radiusBottom, height, numSegments);\r\n\r\n                // Rotate 90 degrees as this shape is horizontal in cannon\r\n                const quat = new this.BJSCANNON.Quaternion();\r\n                quat.setFromAxisAngle(new this.BJSCANNON.Vec3(1, 0, 0), -Math.PI / 2);\r\n                const translation = new this.BJSCANNON.Vec3(0, 0, 0);\r\n                returnValue.transformAllPoints(translation, quat);\r\n                break;\r\n            }\r\n            case PhysicsImpostor.BoxImpostor: {\r\n                const box = impostorExtents.scale(0.5);\r\n                returnValue = new this.BJSCANNON.Box(new this.BJSCANNON.Vec3(this._checkWithEpsilon(box.x), this._checkWithEpsilon(box.y), this._checkWithEpsilon(box.z)));\r\n                break;\r\n            }\r\n            case PhysicsImpostor.PlaneImpostor:\r\n                Logger.Warn(\"Attention, PlaneImposter might not behave as you expect. Consider using BoxImposter instead\");\r\n                returnValue = new this.BJSCANNON.Plane();\r\n                break;\r\n            case PhysicsImpostor.MeshImpostor: {\r\n                // should transform the vertex data to world coordinates!!\r\n                const rawVerts = object.getVerticesData ? object.getVerticesData(VertexBuffer.PositionKind) : [];\r\n                const rawFaces = object.getIndices ? object.getIndices() : [];\r\n                if (!rawVerts) {\r\n                    Logger.Warn(\"Tried to create a MeshImpostor for an object without vertices. This will fail.\");\r\n                    return;\r\n                }\r\n                // get only scale! so the object could transform correctly.\r\n                const oldPosition = object.position.clone();\r\n                const oldRotation = object.rotation && object.rotation.clone();\r\n                const oldQuaternion = object.rotationQuaternion && object.rotationQuaternion.clone();\r\n                object.position.copyFromFloats(0, 0, 0);\r\n                object.rotation && object.rotation.copyFromFloats(0, 0, 0);\r\n                object.rotationQuaternion && object.rotationQuaternion.copyFrom(impostor.getParentsRotation());\r\n\r\n                object.rotationQuaternion && object.parent && object.rotationQuaternion.conjugateInPlace();\r\n\r\n                const transform = object.computeWorldMatrix(true);\r\n                // convert rawVerts to object space\r\n                const transformedVertices: number[] = [];\r\n                let index: number;\r\n                for (index = 0; index < rawVerts.length; index += 3) {\r\n                    Vector3.TransformCoordinates(Vector3.FromArray(rawVerts, index), transform).toArray(transformedVertices, index);\r\n                }\r\n\r\n                Logger.Warn(\"MeshImpostor only collides against spheres.\");\r\n                returnValue = new this.BJSCANNON.Trimesh(transformedVertices, <number[]>rawFaces);\r\n                //now set back the transformation!\r\n                object.position.copyFrom(oldPosition);\r\n                oldRotation && object.rotation && object.rotation.copyFrom(oldRotation);\r\n                oldQuaternion && object.rotationQuaternion && object.rotationQuaternion.copyFrom(oldQuaternion);\r\n                break;\r\n            }\r\n            case PhysicsImpostor.HeightmapImpostor: {\r\n                const oldPosition2 = object.position.clone();\r\n                const oldRotation2 = object.rotation && object.rotation.clone();\r\n                const oldQuaternion2 = object.rotationQuaternion && object.rotationQuaternion.clone();\r\n                object.position.copyFromFloats(0, 0, 0);\r\n                object.rotation && object.rotation.copyFromFloats(0, 0, 0);\r\n                object.rotationQuaternion && object.rotationQuaternion.copyFrom(impostor.getParentsRotation());\r\n                object.rotationQuaternion && object.parent && object.rotationQuaternion.conjugateInPlace();\r\n                object.rotationQuaternion && object.rotationQuaternion.multiplyInPlace(this._minus90X);\r\n\r\n                returnValue = this._createHeightmap(object);\r\n                object.position.copyFrom(oldPosition2);\r\n                oldRotation2 && object.rotation && object.rotation.copyFrom(oldRotation2);\r\n                oldQuaternion2 && object.rotationQuaternion && object.rotationQuaternion.copyFrom(oldQuaternion2);\r\n                object.computeWorldMatrix(true);\r\n                break;\r\n            }\r\n            case PhysicsImpostor.ParticleImpostor:\r\n                returnValue = new this.BJSCANNON.Particle();\r\n                break;\r\n            case PhysicsImpostor.NoImpostor:\r\n                returnValue = new this.BJSCANNON.Box(new this.BJSCANNON.Vec3(0, 0, 0));\r\n                break;\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    private _createHeightmap(object: IPhysicsEnabledObject, pointDepth?: number) {\r\n        let pos = <FloatArray>object.getVerticesData(VertexBuffer.PositionKind);\r\n        const transform = object.computeWorldMatrix(true);\r\n        // convert rawVerts to object space\r\n        const transformedVertices: number[] = [];\r\n        let index: number;\r\n        for (index = 0; index < pos.length; index += 3) {\r\n            Vector3.TransformCoordinates(Vector3.FromArray(pos, index), transform).toArray(transformedVertices, index);\r\n        }\r\n        pos = transformedVertices;\r\n        const matrix = new Array<Array<any>>();\r\n\r\n        //For now pointDepth will not be used and will be automatically calculated.\r\n        //Future reference - try and find the best place to add a reference to the pointDepth variable.\r\n        const arraySize = pointDepth || ~~(Math.sqrt(pos.length / 3) - 1);\r\n        const boundingInfo = object.getBoundingInfo();\r\n        const dim = Math.min(boundingInfo.boundingBox.extendSizeWorld.x, boundingInfo.boundingBox.extendSizeWorld.y);\r\n        const minY = boundingInfo.boundingBox.extendSizeWorld.z;\r\n\r\n        const elementSize = (dim * 2) / arraySize;\r\n\r\n        for (let i = 0; i < pos.length; i = i + 3) {\r\n            const x = Math.round(pos[i + 0] / elementSize + arraySize / 2);\r\n            const z = Math.round((pos[i + 1] / elementSize - arraySize / 2) * -1);\r\n            const y = -pos[i + 2] + minY;\r\n            if (!matrix[x]) {\r\n                matrix[x] = [];\r\n            }\r\n            if (!matrix[x][z]) {\r\n                matrix[x][z] = y;\r\n            }\r\n            matrix[x][z] = Math.max(y, matrix[x][z]);\r\n        }\r\n\r\n        for (let x = 0; x <= arraySize; ++x) {\r\n            if (!matrix[x]) {\r\n                let loc = 1;\r\n                while (!matrix[(x + loc) % arraySize]) {\r\n                    loc++;\r\n                }\r\n                matrix[x] = matrix[(x + loc) % arraySize].slice();\r\n                //console.log(\"missing x\", x);\r\n            }\r\n            for (let z = 0; z <= arraySize; ++z) {\r\n                if (!matrix[x][z]) {\r\n                    let loc = 1;\r\n                    let newValue;\r\n                    while (newValue === undefined) {\r\n                        newValue = matrix[x][(z + loc++) % arraySize];\r\n                    }\r\n                    matrix[x][z] = newValue;\r\n                }\r\n            }\r\n        }\r\n\r\n        const shape = new this.BJSCANNON.Heightfield(matrix, {\r\n            elementSize: elementSize,\r\n        });\r\n\r\n        //For future reference, needed for body transformation\r\n        shape.minY = minY;\r\n\r\n        return shape;\r\n    }\r\n\r\n    private _minus90X = new Quaternion(-0.7071067811865475, 0, 0, 0.7071067811865475);\r\n    private _plus90X = new Quaternion(0.7071067811865475, 0, 0, 0.7071067811865475);\r\n    private _tmpPosition: Vector3 = Vector3.Zero();\r\n    private _tmpDeltaPosition: Vector3 = Vector3.Zero();\r\n    private _tmpUnityRotation: Quaternion = new Quaternion();\r\n\r\n    private _updatePhysicsBodyTransformation(impostor: PhysicsImpostor) {\r\n        const object = impostor.object;\r\n        //make sure it is updated...\r\n        object.computeWorldMatrix && object.computeWorldMatrix(true);\r\n        if (!object.getBoundingInfo()) {\r\n            return;\r\n        }\r\n        const center = impostor.getObjectCenter();\r\n        //m.getAbsolutePosition().subtract(m.getBoundingInfo().boundingBox.centerWorld)\r\n        // The delta between the mesh position and the mesh bounding box center\r\n        this._tmpDeltaPosition.copyFrom(object.getAbsolutePivotPoint().subtract(center));\r\n        this._tmpDeltaPosition.divideInPlace(impostor.object.scaling);\r\n        this._tmpPosition.copyFrom(center);\r\n        let quaternion = object.rotationQuaternion;\r\n\r\n        if (!quaternion) {\r\n            return;\r\n        }\r\n\r\n        //is shape is a plane or a heightmap, it must be rotated 90 degs in the X axis.\r\n        //ideally these would be rotated at time of creation like cylinder but they dont extend ConvexPolyhedron\r\n        if (impostor.type === PhysicsImpostor.PlaneImpostor || impostor.type === PhysicsImpostor.HeightmapImpostor) {\r\n            //-90 DEG in X, precalculated\r\n            quaternion = quaternion.multiply(this._minus90X);\r\n            //Invert! (Precalculated, 90 deg in X)\r\n            //No need to clone. this will never change.\r\n            impostor.setDeltaRotation(this._plus90X);\r\n        }\r\n\r\n        //If it is a heightfield, if should be centered.\r\n        if (impostor.type === PhysicsImpostor.HeightmapImpostor) {\r\n            const mesh = <AbstractMesh>(<any>object);\r\n            let boundingInfo = mesh.getBoundingInfo();\r\n            //calculate the correct body position:\r\n            const rotationQuaternion = mesh.rotationQuaternion;\r\n            mesh.rotationQuaternion = this._tmpUnityRotation;\r\n            mesh.computeWorldMatrix(true);\r\n\r\n            //get original center with no rotation\r\n            const c = center.clone();\r\n\r\n            let oldPivot = mesh.getPivotMatrix();\r\n            if (oldPivot) {\r\n                // create a copy the pivot Matrix as it is modified in place\r\n                oldPivot = oldPivot.clone();\r\n            } else {\r\n                oldPivot = Matrix.Identity();\r\n            }\r\n\r\n            //calculate the new center using a pivot (since this.BJSCANNON.js doesn't center height maps)\r\n            const p = Matrix.Translation(boundingInfo.boundingBox.extendSizeWorld.x, 0, -boundingInfo.boundingBox.extendSizeWorld.z);\r\n            mesh.setPreTransformMatrix(p);\r\n            mesh.computeWorldMatrix(true);\r\n            // force bounding box recomputation\r\n            boundingInfo = mesh.getBoundingInfo();\r\n\r\n            //calculate the translation\r\n            const translation = boundingInfo.boundingBox.centerWorld.subtract(center).subtract(mesh.position).negate();\r\n\r\n            this._tmpPosition.copyFromFloats(translation.x, translation.y - boundingInfo.boundingBox.extendSizeWorld.y, translation.z);\r\n            //add it inverted to the delta\r\n            this._tmpDeltaPosition.copyFrom(boundingInfo.boundingBox.centerWorld.subtract(c));\r\n            this._tmpDeltaPosition.y += boundingInfo.boundingBox.extendSizeWorld.y;\r\n            //rotation is back\r\n            mesh.rotationQuaternion = rotationQuaternion;\r\n\r\n            mesh.setPreTransformMatrix(oldPivot);\r\n            mesh.computeWorldMatrix(true);\r\n        } else if (impostor.type === PhysicsImpostor.MeshImpostor) {\r\n            this._tmpDeltaPosition.copyFromFloats(0, 0, 0);\r\n        }\r\n\r\n        impostor.setDeltaPosition(this._tmpDeltaPosition);\r\n        //Now update the impostor object\r\n        impostor.physicsBody.position.set(this._tmpPosition.x, this._tmpPosition.y, this._tmpPosition.z);\r\n        impostor.physicsBody.quaternion.set(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\r\n    }\r\n\r\n    public setTransformationFromPhysicsBody(impostor: PhysicsImpostor) {\r\n        impostor.object.position.set(impostor.physicsBody.position.x, impostor.physicsBody.position.y, impostor.physicsBody.position.z);\r\n        if (impostor.object.rotationQuaternion) {\r\n            const q = impostor.physicsBody.quaternion;\r\n            impostor.object.rotationQuaternion.set(q.x, q.y, q.z, q.w);\r\n        }\r\n    }\r\n\r\n    public setPhysicsBodyTransformation(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion) {\r\n        impostor.physicsBody.position.set(newPosition.x, newPosition.y, newPosition.z);\r\n        impostor.physicsBody.quaternion.set(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\r\n    }\r\n\r\n    public isSupported(): boolean {\r\n        return this.BJSCANNON !== undefined;\r\n    }\r\n\r\n    public setLinearVelocity(impostor: PhysicsImpostor, velocity: Vector3) {\r\n        impostor.physicsBody.velocity.set(velocity.x, velocity.y, velocity.z);\r\n    }\r\n\r\n    public setAngularVelocity(impostor: PhysicsImpostor, velocity: Vector3) {\r\n        impostor.physicsBody.angularVelocity.set(velocity.x, velocity.y, velocity.z);\r\n    }\r\n\r\n    public getLinearVelocity(impostor: PhysicsImpostor): Nullable<Vector3> {\r\n        const v = impostor.physicsBody.velocity;\r\n        if (!v) {\r\n            return null;\r\n        }\r\n        return new Vector3(v.x, v.y, v.z);\r\n    }\r\n    public getAngularVelocity(impostor: PhysicsImpostor): Nullable<Vector3> {\r\n        const v = impostor.physicsBody.angularVelocity;\r\n        if (!v) {\r\n            return null;\r\n        }\r\n        return new Vector3(v.x, v.y, v.z);\r\n    }\r\n\r\n    public setBodyMass(impostor: PhysicsImpostor, mass: number) {\r\n        impostor.physicsBody.mass = mass;\r\n        impostor.physicsBody.updateMassProperties();\r\n    }\r\n\r\n    public getBodyMass(impostor: PhysicsImpostor): number {\r\n        return impostor.physicsBody.mass;\r\n    }\r\n\r\n    public getBodyFriction(impostor: PhysicsImpostor): number {\r\n        return impostor.physicsBody.material.friction;\r\n    }\r\n\r\n    public setBodyFriction(impostor: PhysicsImpostor, friction: number) {\r\n        impostor.physicsBody.material.friction = friction;\r\n    }\r\n\r\n    public getBodyRestitution(impostor: PhysicsImpostor): number {\r\n        return impostor.physicsBody.material.restitution;\r\n    }\r\n\r\n    public setBodyRestitution(impostor: PhysicsImpostor, restitution: number) {\r\n        impostor.physicsBody.material.restitution = restitution;\r\n    }\r\n\r\n    public sleepBody(impostor: PhysicsImpostor) {\r\n        impostor.physicsBody.sleep();\r\n    }\r\n\r\n    public wakeUpBody(impostor: PhysicsImpostor) {\r\n        impostor.physicsBody.wakeUp();\r\n    }\r\n\r\n    public updateDistanceJoint(joint: PhysicsJoint, maxDistance: number) {\r\n        joint.physicsJoint.distance = maxDistance;\r\n    }\r\n\r\n    public setMotor(joint: IMotorEnabledJoint, speed?: number, maxForce?: number, motorIndex?: number) {\r\n        if (!motorIndex) {\r\n            joint.physicsJoint.enableMotor();\r\n            joint.physicsJoint.setMotorSpeed(speed);\r\n            if (maxForce) {\r\n                this.setLimit(joint, maxForce);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setLimit(joint: IMotorEnabledJoint, minForce: number, maxForce?: number) {\r\n        joint.physicsJoint.motorEquation.maxForce = maxForce;\r\n        joint.physicsJoint.motorEquation.minForce = minForce === void 0 ? -minForce : minForce;\r\n    }\r\n\r\n    public syncMeshWithImpostor(mesh: AbstractMesh, impostor: PhysicsImpostor) {\r\n        const body = impostor.physicsBody;\r\n\r\n        mesh.position.x = body.position.x;\r\n        mesh.position.y = body.position.y;\r\n        mesh.position.z = body.position.z;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            mesh.rotationQuaternion.x = body.quaternion.x;\r\n            mesh.rotationQuaternion.y = body.quaternion.y;\r\n            mesh.rotationQuaternion.z = body.quaternion.z;\r\n            mesh.rotationQuaternion.w = body.quaternion.w;\r\n        }\r\n    }\r\n\r\n    public getRadius(impostor: PhysicsImpostor): number {\r\n        const shape = impostor.physicsBody.shapes[0];\r\n        return shape.boundingSphereRadius;\r\n    }\r\n\r\n    public getBoxSizeToRef(impostor: PhysicsImpostor, result: Vector3): void {\r\n        const shape = impostor.physicsBody.shapes[0];\r\n        result.x = shape.halfExtents.x * 2;\r\n        result.y = shape.halfExtents.y * 2;\r\n        result.z = shape.halfExtents.z * 2;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    private _extendNamespace() {\r\n        //this will force cannon to execute at least one step when using interpolation\r\n        const step_tmp1 = new this.BJSCANNON.Vec3();\r\n        const engine = this.BJSCANNON;\r\n        this.BJSCANNON.World.prototype.step = function (dt: number, timeSinceLastCalled: number, maxSubSteps: number) {\r\n            maxSubSteps = maxSubSteps || 10;\r\n            timeSinceLastCalled = timeSinceLastCalled || 0;\r\n            if (timeSinceLastCalled === 0) {\r\n                this.internalStep(dt);\r\n                this.time += dt;\r\n            } else {\r\n                let internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\r\n                internalSteps = Math.min(internalSteps, maxSubSteps) || 1;\r\n                const t0 = performance.now();\r\n                for (let i = 0; i !== internalSteps; i++) {\r\n                    this.internalStep(dt);\r\n                    if (performance.now() - t0 > dt * 1000) {\r\n                        break;\r\n                    }\r\n                }\r\n                this.time += timeSinceLastCalled;\r\n                const h = this.time % dt;\r\n                const h_div_dt = h / dt;\r\n                const interpvelo = step_tmp1;\r\n                const bodies = this.bodies;\r\n                for (let j = 0; j !== bodies.length; j++) {\r\n                    const b = bodies[j];\r\n                    if (b.type !== engine.Body.STATIC && b.sleepState !== engine.Body.SLEEPING) {\r\n                        b.position.vsub(b.previousPosition, interpvelo);\r\n                        interpvelo.scale(h_div_dt, interpvelo);\r\n                        b.position.vadd(interpvelo, b.interpolatedPosition);\r\n                    } else {\r\n                        b.interpolatedPosition.set(b.position.x, b.position.y, b.position.z);\r\n                        b.interpolatedQuaternion.set(b.quaternion.x, b.quaternion.y, b.quaternion.z, b.quaternion.w);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @returns PhysicsRaycastResult\r\n     */\r\n    public raycast(from: Vector3, to: Vector3): PhysicsRaycastResult {\r\n        this._raycastResult.reset(from, to);\r\n        this.raycastToRef(from, to, this._raycastResult);\r\n        return this._raycastResult;\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @param result resulting PhysicsRaycastResult\r\n     */\r\n    public raycastToRef(from: Vector3, to: Vector3, result: PhysicsRaycastResult): void {\r\n        this._cannonRaycastResult.reset();\r\n        this.world.raycastClosest(from, to, {}, this._cannonRaycastResult);\r\n\r\n        result.reset(from, to);\r\n        if (this._cannonRaycastResult.hasHit) {\r\n            // TODO: do we also want to get the body it hit?\r\n            result.setHitData(\r\n                {\r\n                    x: this._cannonRaycastResult.hitNormalWorld.x,\r\n                    y: this._cannonRaycastResult.hitNormalWorld.y,\r\n                    z: this._cannonRaycastResult.hitNormalWorld.z,\r\n                },\r\n                {\r\n                    x: this._cannonRaycastResult.hitPointWorld.x,\r\n                    y: this._cannonRaycastResult.hitPointWorld.y,\r\n                    z: this._cannonRaycastResult.hitPointWorld.z,\r\n                }\r\n            );\r\n            result.setHitDistance(this._cannonRaycastResult.distance);\r\n        }\r\n    }\r\n}\r\n\r\nPhysicsEngine.DefaultPluginFactory = () => {\r\n    return new CannonJSPlugin();\r\n};\r\n"],
  "mappings": "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",
  "names": ["meshes", "mesh"]
}
